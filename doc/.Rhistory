errbar(C.list, error.cv, error.cv+error.cv.sd, error.cv-error.cv.sd,
add = TRUE, errbar.col = "steelblue2", lwd = 0.5)
plot(C.list, error.cv,
xlab = "Number of Classes", ylab = "5-Fold CV Error",
ylim = c(0.98,1.05),
type = "b", xaxt = "n")
axis(1, at = C.list, labels = C.list)
errbar(C.list, error.cv, error.cv+error.cv.sd, error.cv-error.cv.sd,
add = TRUE, errbar.col = col=gray(0.4), lwd = 0.5)
plot(C.list, error.cv,
xlab = "Number of Classes", ylab = "5-Fold CV Error",
ylim = c(0.98,1.05),
type = "b", xaxt = "n")
axis(1, at = C.list, labels = C.list)
errbar(C.list, error.cv, error.cv+error.cv.sd, error.cv-error.cv.sd,
add = TRUE, errbar.col = gray(0.4), lwd = 0.5)
abline(h=lbound, col="steelblue2", lty=2)
abline(h=ubound, col="steelblue2", lty=2)
plot(C.list, error.cv,
xlab = "Number of Classes", ylab = "5-Fold CV Error",
ylim = c(0.98,1.05),
type = "l", xaxt = "n")
axis(1, at = C.list, labels = C.list)
errbar(C.list, error.cv, error.cv+error.cv.sd, error.cv-error.cv.sd,
add = TRUE, errbar.col = gray(0.4), lwd = 0.5)
points(C.list, error.cv,col="steelblue2")
abline(h=lbound, col="steelblue2", lty=2)
abline(h=ubound, col="steelblue2", lty=2)
plot(C.list, error.cv,
xlab = "Number of Classes", ylab = "5-Fold CV Error",
ylim = c(0.98,1.05),
type = "l", xaxt = "n")
axis(1, at = C.list, labels = C.list)
errbar(C.list, error.cv, error.cv+error.cv.sd, error.cv-error.cv.sd,
add = TRUE, errbar.col = gray(0.4), lwd = 0.5)
points(C.list, error.cv,col="steelblue2",pch = 19)
abline(h=lbound, col="steelblue2", lty=2)
abline(h=ubound, col="steelblue2", lty=2)
plot(C.list, error.cv,
xlab = "Number of Classes", ylab = "5-Fold CV Error",
ylim = c(0.98,1.05),
type = "l", xaxt = "n")
axis(1, at = C.list, labels = C.list)
errbar(C.list, error.cv, error.cv+error.cv.sd, error.cv-error.cv.sd,
add = TRUE, errbar.col = "steelblue2", lwd = 0.5)
points(C.list, error.cv,col="steelblue2",pch = 19)
abline(h=lbound, col=gray(0.4), lty=2)
abline(h=ubound, col=gray(0.4), lty=2)
plot(C.list, error.cv,
xlab = "Number of Classes", ylab = "5-Fold CV Error",
ylim = c(0.98,1.05), xaxt = "n",
type = "l", col="steelblue2")
axis(1, at = C.list, labels = C.list)
errbar(C.list, error.cv, error.cv+error.cv.sd, error.cv-error.cv.sd,
add = TRUE, errbar.col = gray(0.4), lwd = 0.5)
points(C.list, error.cv, col="steelblue2",pch = 19)
abline(h=lbound, col=gray(0.4), lty=2)
abline(h=ubound, col=gray(0.4), lty=2)
error.cv <- colMeans(error.validation)
error.cv.sd <- apply(error.validation, 2, sd)/sqrt(nrow(error.validation))
c.min <- which.min(error.cv)
lbound <- error.cv[c.min]-error.cv.sd[c.min]
ubound <- error.cv[c.min]+error.cv.sd[c.min]
plot(C.list, error.cv,
xlab = "Number of Classes", ylab = "5-Fold CV Error",
ylim = c(0.98,1.05), xaxt = "n",
type = "l", col="steelblue2")
axis(1, at = C.list, labels = C.list)
errbar(C.list, error.cv, error.cv+error.cv.sd, error.cv-error.cv.sd,
add = TRUE, errbar.col = gray(0.4), lwd = 0.5)
points(C.list, error.cv, col="steelblue2",pch = 19)
abline(h=lbound, col=gray(0.4), lty=2)
abline(h=ubound, col=gray(0.4), lty=2)
C.best <- C.list[(error.cv>lbound) & (error.cv<ubound)][1]
print(paste0("The Best number of classes is ", C.best))
plot(C.list, error.cv, main = "5-Fold Cross-Validation",
xlab = "Number of Classes", ylab = "Prediction Error",
ylim = c(0.98,1.05), xaxt = "n",
type = "l", col="steelblue2")
axis(1, at = C.list, labels = C.list)
errbar(C.list, error.cv, error.cv+error.cv.sd, error.cv-error.cv.sd,
add = TRUE, errbar.col = gray(0.4), lwd = 0.5)
points(C.list, error.cv, col="steelblue2",pch = 19)
abline(h=lbound, col=gray(0.4), lty=2)
abline(h=ubound, col=gray(0.4), lty=2)
pars.best <- cluster.em(df.train2, C.best, 0.05)
df.est <- cluster.score(df.train2, pars.best)
error.test <- sum(abs(df.est-df.test2),na.rm = T)/ sum(!is.na(df.est-df.test2))
error.test
getwd()
cluster.pi <- function(df, C, gamma){
# Compute pi
# Input-- df: dataframe (User x Movie)
#         C: number of classes
#         gamma (Class x Movie x Score): probability of the score for a movie in a given class
# Output-- Pi (User x Class)
# Define Variables
users <- rownames(df) # i
movies <- colnames(df) # j
scores <- unique(unlist(df))
scores <- sort(scores[!is.na(scores)]) # k
N <- length(users) # number of users
M <- length(movies) # number of movies
K <- length(scores) # number of scores
# Compute phi
I <- array(0, c(N,M,K)) # User x Movie x Score
phi <- matrix(0, N, C) # User x Class
for (k in seq(K)) {
I[,,k] <- ifelse((df!=k|is.na(df)),0,1)
phi <- phi + I[,,k]%*%t(log(gamma[,,k]))
}
phi <- exp(phi)
phi[phi==0] <- exp(-745.13) #exp(-745.13)==0 False; exp(-745.14)==0 True
w <- phi*rep(mu, each=N) # User x Class
w[w==0] <- min(w[w!=0])
Pi <- w/rowSums(w) # User x Class
return(Pi)
}
cluster.score <- function(df, pars){
# Compute Score Estimation
# Input-- df: dataframe (User x Movie)
#         pars: list(mu, gamma) parameters of cluster model
# Output-- a dataframe of estimated scores (User x Movie)
# Define Variables
users <- rownames(df) # i
movies <- colnames(df) # j
scores <- unique(unlist(df))
scores <- sort(scores[!is.na(scores)]) # k
N <- length(users) # number of users
M <- length(movies) # number of movies
K <- length(scores) # number of scores
mu <- pars$mu
gamma <- pars$gamma
C <- length(mu)
#phi <- cluster.phi(df, C, gamma) # User x Class
#w <- phi*rep(mu,each=N) # User x Class
#w[w==0] <- min(w[w!=0])
Pi <- cluster.pi(df, C, gamma) # User x Class
I.all <- ifelse(is.na(df),1,0) # User x Movie
score.est <- 0
for (k in seq(K)) {
prob <- (Pi%*%gamma[,,k])*I.all
#prob <- (w%*%gamma[,,k])*I.all/rowSums(w)
score.est <- score.est + k*prob
}
score.est[!is.na(df)] <- NA
return(score.est)
}
df.est <- cluster.score(df.train2, pars.best)
cluster.pi <- function(df, pars){
# Compute pi
# Input-- df: dataframe (User x Movie)
#         C: number of classes
#         gamma (Class x Movie x Score): probability of the score for a movie in a given class
# Output-- Pi (User x Class)
# Define Variables
users <- rownames(df) # i
movies <- colnames(df) # j
scores <- unique(unlist(df))
scores <- sort(scores[!is.na(scores)]) # k
N <- length(users) # number of users
M <- length(movies) # number of movies
K <- length(scores) # number of scores
mu <- pars$mu
gamma <- pars$gamma
C <- length(mu)
# Compute phi
I <- array(0, c(N,M,K)) # User x Movie x Score
phi <- matrix(0, N, C) # User x Class
for (k in seq(K)) {
I[,,k] <- ifelse((df!=k|is.na(df)),0,1)
phi <- phi + I[,,k]%*%t(log(gamma[,,k]))
}
phi <- exp(phi)
phi[phi==0] <- exp(-745.13) #exp(-745.13)==0 False; exp(-745.14)==0 True
w <- phi*rep(mu, each=N) # User x Class
w[w==0] <- min(w[w!=0])
Pi <- w/rowSums(w) # User x Class
return(Pi)
}
cluster.pi <- function(df, pars){
# Compute pi
# Input-- df: dataframe (User x Movie)
#         C: number of classes
#         gamma (Class x Movie x Score): probability of the score for a movie in a given class
# Output-- Pi (User x Class)
# Define Variables
users <- rownames(df) # i
movies <- colnames(df) # j
scores <- unique(unlist(df))
scores <- sort(scores[!is.na(scores)]) # k
N <- length(users) # number of users
M <- length(movies) # number of movies
K <- length(scores) # number of scores
mu <- pars$mu
gamma <- pars$gamma
C <- length(mu)
# Compute phi
I <- array(0, c(N,M,K)) # User x Movie x Score
phi <- matrix(0, N, C) # User x Class
for (k in seq(K)) {
I[,,k] <- ifelse((df!=k|is.na(df)),0,1)
phi <- phi + I[,,k]%*%t(log(gamma[,,k]))
}
phi <- exp(phi)
phi[phi==0] <- exp(-745.13) #exp(-745.13)==0 False; exp(-745.14)==0 True
w <- phi*rep(mu, each=N) # User x Class
w[w==0] <- min(w[w!=0])
Pi <- w/rowSums(w) # User x Class
return(Pi)
}
cluster.score <- function(df, pars){
# Compute Score Estimation
# Input-- df: dataframe (User x Movie)
#         pars: list(mu, gamma) parameters of cluster model
# Output-- a dataframe of estimated scores (User x Movie)
# Define Variables
users <- rownames(df) # i
movies <- colnames(df) # j
scores <- unique(unlist(df))
scores <- sort(scores[!is.na(scores)]) # k
N <- length(users) # number of users
M <- length(movies) # number of movies
K <- length(scores) # number of scores
mu <- pars$mu
gamma <- pars$gamma
C <- length(mu)
#phi <- cluster.phi(df, C, gamma) # User x Class
#w <- phi*rep(mu,each=N) # User x Class
#w[w==0] <- min(w[w!=0])
Pi <- cluster.pi(df, pars) # User x Class
I.all <- ifelse(is.na(df),1,0) # User x Movie
score.est <- 0
for (k in seq(K)) {
prob <- (Pi%*%gamma[,,k])*I.all
#prob <- (w%*%gamma[,,k])*I.all/rowSums(w)
score.est <- score.est + k*prob
}
score.est[!is.na(df)] <- NA
return(score.est)
}
df.est <- cluster.score(df.train2, pars.best)
error.test <- sum(abs(df.est-df.test2),na.rm = T)/ sum(!is.na(df.est-df.test2))
error.test
array(c(1:9,1:9),c(3,3,2))
array(c(1:9),c(3,3))
rowsum(a)
a <- array(c(1:9),c(3,3))
rowsum(a)
a <- array(c(1:9),c(3,3))
rowSums(a)
a <- array(c(1:15),c(5,3))
g <- array(runif(9),c(3,3))
a%*%g/rowSums(a)==(a/rowSums(a))%*%g
a%*%g/rowSums(a)
(a/rowSums(a))%*%g
a%*%g/rowSums(a)
(a/rowSums(a))%*%g
identical(a%*%g/rowSums(a),(a/rowSums(a))%*%g)
(a%*%g/rowSums(a)==(a/rowSums(a))%*%g)
a%*%g/rowSums(a)
(a/rowSums(a))%*%g
(a%*%g/rowSums(a))[2,]
(a/rowSums(a))%*%g[2,]
((a/rowSums(a))%*%g)[2,]
(a%*%g/rowSums(a))[2,]
((a/rowSums(a))%*%g)[2,]
(a%*%g/rowSums(a))[2,]==((a/rowSums(a))%*%g)[2,]
dim(gamma)[3]
array(C(1:9,1:9),c(3,3,2))
a <- array(c(1:9,1:9),c(3,3,2))
dim(a)
a <- array(c(1:9,1:9),c(3,3,2))
dim(a)[3]
png(filename = "../figs/ClusterModel_CV.png")
plot(C.list, error.cv, main = "5-Fold Cross-Validation",
xlab = "Number of Classes", ylab = "Prediction Error",
ylim = c(0.98,1.05), xaxt = "n",
type = "l", col="steelblue2")
axis(1, at = C.list, labels = C.list)
errbar(C.list, error.cv, error.cv+error.cv.sd, error.cv-error.cv.sd,
add = TRUE, errbar.col = gray(0.4), lwd = 0.5)
points(C.list, error.cv, col="steelblue2",pch = 19)
abline(h=lbound, col=gray(0.4), lty=2)
abline(h=ubound, col=gray(0.4), lty=2)
dev.off
plot(C.list, error.cv, main = "5-Fold Cross-Validation",
xlab = "Number of Classes", ylab = "Prediction Error",
ylim = c(0.98,1.05), xaxt = "n",
type = "l", col="steelblue2")
axis(1, at = C.list, labels = C.list)
errbar(C.list, error.cv, error.cv+error.cv.sd, error.cv-error.cv.sd,
add = TRUE, errbar.col = gray(0.4), lwd = 0.5)
points(C.list, error.cv, col="steelblue2",pch = 19)
abline(h=lbound, col=gray(0.4), lty=2)
abline(h=ubound, col=gray(0.4), lty=2)
dev.copy2pdf(file ="../figs/ClusterModel_CV.pdf")
x11()
plot(C.list, error.cv, main = "5-Fold Cross-Validation",
xlab = "Number of Classes", ylab = "Prediction Error",
ylim = c(0.98,1.05), xaxt = "n",
type = "l", col="steelblue2")
axis(1, at = C.list, labels = C.list)
errbar(C.list, error.cv, error.cv+error.cv.sd, error.cv-error.cv.sd,
add = TRUE, errbar.col = gray(0.4), lwd = 0.5)
points(C.list, error.cv, col="steelblue2",pch = 19)
abline(h=lbound, col=gray(0.4), lty=2)
abline(h=ubound, col=gray(0.4), lty=2)
dev.copy2pdf(file ="../figs/ClusterModel_CV.pdf")
plot(C.list, error.cv, main = "5-Fold Cross-Validation",
xlab = "Number of Classes", ylab = "Prediction Error",
ylim = c(0.98,1.05), xaxt = "n",
type = "l", col="steelblue2")
axis(1, at = C.list, labels = C.list)
errbar(C.list, error.cv, error.cv+error.cv.sd, error.cv-error.cv.sd,
add = TRUE, errbar.col = gray(0.4), lwd = 0.5)
points(C.list, error.cv, col="steelblue2",pch = 19)
abline(h=lbound, col=gray(0.4), lty=2)
abline(h=ubound, col=gray(0.4), lty=2)
dev.copy2pdf(file ="../figs/ClusterModel_CV.pdf")
x11()
plot(C.list, error.cv, main = "5-Fold Cross-Validation",
xlab = "Number of Classes", ylab = "Prediction Error",
ylim = c(0.98,1.05), xaxt = "n",
type = "l", col="steelblue2")
axis(1, at = C.list, labels = C.list)
errbar(C.list, error.cv, error.cv+error.cv.sd, error.cv-error.cv.sd,
add = TRUE, errbar.col = gray(0.4), lwd = 0.5)
points(C.list, error.cv, col="steelblue2",pch = 19)
abline(h=lbound, col=gray(0.4), lty=2)
abline(h=ubound, col=gray(0.4), lty=2)
dev.copy2pdf(file ="../figs/ClusterModel_CV.pdf")
error.cv <- colMeans(error.validation)
error.cv.sd <- apply(error.validation, 2, sd)/sqrt(nrow(error.validation))
c.min <- which.min(error.cv)
lbound <- error.cv[c.min]-error.cv.sd[c.min]
ubound <- error.cv[c.min]+error.cv.sd[c.min]
plot(C.list, error.cv, main = "5-Fold Cross-Validation",
xlab = "Number of Classes", ylab = "Prediction Error",
ylim = c(0.98,1.05), xaxt = "n",
type = "l", col="steelblue2")
axis(1, at = C.list, labels = C.list)
errbar(C.list, error.cv, error.cv+error.cv.sd, error.cv-error.cv.sd,
add = TRUE, errbar.col = gray(0.4), lwd = 0.5)
points(C.list, error.cv, col="steelblue2",pch = 19)
abline(h=lbound, col=gray(0.4), lty=2)
abline(h=ubound, col=gray(0.4), lty=2)
dev.copy2pdf(file ="../figs/ClusterModel_CV.pdf")
C.best <- C.list[(error.cv>lbound) & (error.cv<ubound)][1]
print(paste0("The Best number of classes is ", C.best))
load("../output/CM.error.validation.RData")
CM.error.validation <- CM.error.validation
setwd("~/GitHub/Spring2018-Project4-group-10/doc")
load("../output/CM.error.validation.RData")
CM.error.validation <- CM.error.validation
CM.error.validation <- error.validation
save(CM.error.validation, file = paste0("../output/CM.error.validation.RData"))
rm(error.validation)
rm(CM.error.validation)
load("../output/CM.error.validation.RData")
CM.error.cv <- colMeans(CM.error.validation)
CM.error.cv.sd <- apply(CM.error.validation, 2, sd)/sqrt(nrow(CM.error.validation))
c.min <- which.min(CM.error.cv)
lbound <- CM.error.cv[c.min] - CM.error.cv.sd[c.min]
ubound <- CM.error.cv[c.min] + CM.error.cv.sd[c.min]
plot(C.list, CM.error.cv, main = "5-Fold Cross-Validation",
xlab = "Number of Classes", ylab = "Prediction Error",
ylim = c(0.98,1.05), xaxt = "n",
type = "l", col="steelblue2")
C.list <- c(seq(3,13, by=2))
CM.error.cv <- colMeans(CM.error.validation)
CM.error.cv.sd <- apply(CM.error.validation, 2, sd)/sqrt(nrow(CM.error.validation))
c.min <- which.min(CM.error.cv)
lbound <- CM.error.cv[c.min] - CM.error.cv.sd[c.min]
ubound <- CM.error.cv[c.min] + CM.error.cv.sd[c.min]
plot(C.list, CM.error.cv, main = "5-Fold Cross-Validation",
xlab = "Number of Classes", ylab = "Prediction Error",
ylim = c(0.98,1.05), xaxt = "n",
type = "l", col="steelblue2")
axis(1, at = C.list, labels = C.list)
errbar(C.list, CM.error.cv,
CM.error.cv+CM.error.cv.sd, CM.error.cv-CM.error.cv.sd,
add = TRUE, errbar.col = gray(0.4), lwd = 0.5)
library("Hmisc")
plot(C.list, CM.error.cv, main = "5-Fold Cross-Validation",
xlab = "Number of Classes", ylab = "Prediction Error",
ylim = c(0.98,1.05), xaxt = "n",
type = "l", col="steelblue2")
axis(1, at = C.list, labels = C.list)
errbar(C.list, CM.error.cv,
CM.error.cv+CM.error.cv.sd, CM.error.cv-CM.error.cv.sd,
add = TRUE, errbar.col = gray(0.4), lwd = 0.5)
points(C.list, CM.error.cv, col="steelblue2",pch = 19)
abline(h=lbound, col=gray(0.4), lty=2)
abline(h=ubound, col=gray(0.4), lty=2)
dev.copy2pdf(file ="../figs/CM.CrossValidation.pdf")
C.best <- C.list[(CM.error.cv>lbound) & (CM.error.cv<ubound)][1]
print(paste0("The Best number of classes is ", C.best))
load("../output/CM.pars.RData")
CM.pars <- pars.best
save(CM.pars, file = paste0("../output/CM.pars.RData"))
rm(pars.best)
rm(CM.pars)
load("../output/CM.pars.RData")
#train1 <- read.csv("../data/MS_sample/data_train.csv", header=TRUE)
#test1 <- read.csv("../data/MS_sample/data_test.csv", header=TRUE)
train2 <- read.csv("../data/eachmovie_sample/data_train.csv", header=TRUE)
test2 <- read.csv("../data/eachmovie_sample/data_test.csv", header=TRUE)
library(reshape2)
df.train2 <- dcast(train2, User~Movie, value.var = "Score", fill = NA)
df.test2 <- dcast(test2, User~Movie, value.var = "Score", fill = NA)
rownames(df.train2) <- df.train2[,1]
rownames(df.test2) <- df.test2[,1]
df.train2 <- df.train2[,-1]
df.test2 <- df.test2[,-1]
#dim(df.train2)
#df.train2[1:6,1:9]
CM.est <- cluster.score(df.train2, CM.pars)
source("../lib/ClusterModel.R")
CM.est <- cluster.score(df.train2, CM.pars)
save(CM.est, file = paste0("../output/CM.est.RData"))
rm(CM.est)
load("../output/df.est.RData")
load("../output/CM.est.RData")
CM.error.test <- sum(abs(CM.est-df.test2),na.rm = T)/ sum(!is.na(CM.est-df.test2))
print(paste0("The test error of the cluster model is ", CM.error.test))
print(paste0("The test error of the cluster model is ", round(CM.error.test,4)))
print(paste0("The test error of the cluster model is ", round(CM.error.test,4)), ".")
print(paste0("The test error of the cluster model is ", round(CM.error.test,4),"."))
require("Hmisc")
library("reshape2","Hmisc")
library(c("reshape2", "Hmisc"))
library("Hmisc","reshape2")
#train1 <- read.csv("../data/MS_sample/data_train.csv", header=TRUE)
#test1 <- read.csv("../data/MS_sample/data_test.csv", header=TRUE)
train2 <- read.csv("../data/eachmovie_sample/data_train.csv", header=TRUE)
test2 <- read.csv("../data/eachmovie_sample/data_test.csv", header=TRUE)
#library("reshape2")
df.train2 <- dcast(train2, User~Movie, value.var = "Score", fill = NA)
df.test2 <- dcast(test2, User~Movie, value.var = "Score", fill = NA)
rownames(df.train2) <- df.train2[,1]
rownames(df.test2) <- df.test2[,1]
df.train2 <- df.train2[,-1]
df.test2 <- df.test2[,-1]
#dim(df.train2)
#df.train2[1:6,1:9]
getwd()
getwd()
setwd("~/GitHub/Spring2018-Project4-group-10/doc")
getwd()
library("Hmisc","reshape2")
packages.used <- c("reshape2", "Hmisc")
# Check packages that need to be installed
packages.needed <- setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# Install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,
repos='http://cran.us.r-project.org')
}
library("Hmisc","reshape2")
run.CM.cv <- FALSE
run.CM.pars <- FALSE
run.CM.est <- FALSE
source("../lib/ClusterModel.R")
### cluster.cv -- Perfom K-Fold Cross-Validation
### cluster.em -- Learn Parameters Using EM Algorithm
### cluster.score -- Compute Score Estimation
### cluster.pi -- Compute Responsibilities
CM.C.list <- c(seq(3,13, by=2))
if(run.CM.cv){
CM.error.validation <- cluster.cv(df.train2, CM.C.list)
save(CM.error.validation, file = paste0("../output/CM.error.validation.RData"))
}else{
load("../output/CM.error.validation.RData")
}
#library("Hmisc")
CM.error.cv <- colMeans(CM.error.validation)
CM.error.cv.sd <- apply(CM.error.validation, 2, sd)/sqrt(nrow(CM.error.validation))
CM.c.min <- which.min(CM.error.cv)
CM.error.cv.lbound <- CM.error.cv[CM.c.min] - CM.error.cv.sd[CM.c.min]
CM.error.cv.ubound <- CM.error.cv[CM.c.min] + CM.error.cv.sd[CM.c.min]
plot(CM.C.list, CM.error.cv, main = "5-Fold Cross-Validation",
xlab = "Number of Classes", ylab = "Prediction Error",
ylim = c(0.98,1.05), xaxt = "n",
type = "l", col="steelblue2")
axis(1, at = CM.C.list, labels = CM.C.list)
errbar(CM.C.list, CM.error.cv,
CM.error.cv+CM.error.cv.sd, CM.error.cv-CM.error.cv.sd,
add = TRUE, errbar.col = gray(0.4), lwd = 0.5)
points(CM.C.list, CM.error.cv, col="steelblue2",pch = 19)
abline(h=CM.error.cv.lbound, col=gray(0.4), lty=2)
abline(h=CM.error.cv.ubound, col=gray(0.4), lty=2)
dev.copy2pdf(file ="../figs/CM.CrossValidation.pdf")
CM.C.best <- CM.C.list[(CM.error.cv>CM.error.cv.lbound)
& (CM.error.cv<CM.error.cv.ubound)][1]
print(paste0("The Best number of classes is ", CM.C.best))
if(run.CM.pars){
CM.pars <- cluster.em(df.train2, C.best, 0.05)
save(CM.pars, file = paste0("../output/CM.pars.RData"))
}else{
load("../output/CM.pars.RData")
}
if(run.CM.est){
CM.est <- cluster.score(df.train2, CM.pars)
save(CM.est, file = paste0("../output/CM.est.RData"))
}else{
load("../output/CM.est.RData")
}
CM.error.test <- sum(abs(CM.est-df.test2),na.rm = T)/ sum(!is.na(CM.est-df.test2))
print(paste0("The test error of the cluster model is ", round(CM.error.test,4),"."))
