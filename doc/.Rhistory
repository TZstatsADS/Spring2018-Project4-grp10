mpfr(pi, 10)
mpfr(pi, 100)
mpfr(pi, 1000)
train2 <- read.csv("../data/eachmovie_sample/data_train.csv", header=TRUE)
test2 <- read.csv("../data/eachmovie_sample/data_test.csv", header=TRUE)
#library("reshape2")
df.train2 <- dcast(train2, User~Movie, value.var = "Score", fill = NA)
df.test2 <- dcast(test2, User~Movie, value.var = "Score", fill = NA)
rownames(df.train2) <- df.train2[,1]
rownames(df.test2) <- df.test2[,1]
df.train2 <- df.train2[,-1]
df.test2 <- df.test2[,-1]
#df.train2[1:6,1:9]
df <- df.train2
C <- 9
seed=123
users <- rownames(df) # i
movies <- colnames(df) # j
scores <- unique(unlist(df))
scores <- sort(scores[!is.na(scores)]) # k
N <- length(users) # number of users
M <- length(movies) # number of movies
K <- length(scores) # number of scores
set.seed(seed)
mu <- runif(C)
mu <- mu/sum(mu)
gamma <- array(runif(C*M*K), c(C,M,K)) # Class x Movie x Score
for (k in seq(K)) {
gamma[,,k] <- gamma[,,k]/rowSums(gamma[,,], dims = 2)
}
pars <- list(mu=mu, gamma=gamma)
I <- array(0, c(N,M,K)) # User x Movie x Score
phi <- matrix(0, N, C) # User x Class
for (k in seq(K)) {
I[,,k] <- ifelse((df!=k|is.na(df)),0,1)
phi <- phi + I[,,k]%*%t(log(gamma[,,k]))
}
sum(is.na(phi))
sum(phi==0)
min(phi)
mpfr(-2327.643, 1000)
exp(mpfr(-2327.643, 1000))
exp(mpfr(-2327.643, 100))
exp(mpfr(-2327.643, 10))
exp(mpfr(-2327.643, 2))
exp(mpfr(-2327.643, 53))
exp(-2327.643)
mpfr(exp(-2327.643),53)
phi <- exp(phi)
sum(is.na(phi))
sum(phi==0)
phi <- matrix(0, N, C) # User x Class
for (k in seq(K)) {
I[,,k] <- ifelse((df!=k|is.na(df)),0,1)
phi <- phi + I[,,k]%*%t(log(gamma[,,k]))
}
53/log(2)
53/log(2,base = 10)
52*log(2,base = 10)
10/log(2,base = 10)
2/log(2,base = 10)
mpfr(-2327.643, 6)
10/log(2,base = 10)
mpfr(-2327.643, 10/log(2,base = 10))
mpfr(-2327.643, 10/log(2,base = 10))
mpfr(-2327.643, 20/log(2,base = 10))
mpfr(-2327.643, 30/log(2,base = 10))
exp(mpfr(-2327.643, 30/log(2,base = 10)))
exp(mpfr(-2327.643, 10/log(2,base = 10)))
exp(mpfr(-2327.643, 2/log(2,base = 10)))
exp(mpfr(-2327.643, 1/log(2,base = 10)))
1/log(2,base = 10)
0/log(2,base = 10)
2/log(2,base = 10)
exp(mpfr(-2327.643, 2/log(2,base = 10)))
mpfr(-2327.643, 2/log(2,base = 10))
exp(mpfr(-2327.643, 5/log(2,base = 10)))
exp(mpfr(-2327.643, 10/log(2,base = 10)))
30/log(2,base = 10)
10/log(2,base = 10)
mpfr(-2327.643, 10/log(2,base = 10))
mpfr(-2327.643, 20/log(2,base = 10))
mpfr(-2327.643, 10/log(2,base = 10))
exp(mpfr(-2327.643, 10/log(2,base = 10)))
sum(is.na(phi))
sum(phi==0)
phi <- exp(mpfr(phi, 10/log(2,base = 10)))
sum(is.na(phi))
sum(phi==0)
sum(is.na(phi))
sum(phi==0)
w <- phi*rep(mu, each=N)
sum(is.na(w))
sum(w==0)
min(w)
Pi <- w/rowSums(w)
sum(is.na(Pi))
sum(Pi==0)
min(Pi)
mu.new <- colSums(Pi)/N
I.all <- ifelse(is.na(df),0,1) # User x Movie
I <- array(0, c(N,M,K)) # User x Movie x Score
gamma.new <-  array(NA, c(C,M,K))
for (k in seq(K)){
I[,,k] <- ifelse((df!=k|is.na(df)),0,1)
gamma.new[,,k] <- t(Pi)%*%I[,,k]/t(Pi)%*%I.all
}
mu.new
mpfr(pi,53)
mpfr(pi,120)
mpfr(pi)
pi
53*log(2,base = 10)
library("Rmpfr")
train2 <- read.csv("../data/eachmovie_sample/data_train.csv", header=TRUE)
test2 <- read.csv("../data/eachmovie_sample/data_test.csv", header=TRUE)
#library("reshape2")
df.train2 <- dcast(train2, User~Movie, value.var = "Score", fill = NA)
df.test2 <- dcast(test2, User~Movie, value.var = "Score", fill = NA)
rownames(df.train2) <- df.train2[,1]
rownames(df.test2) <- df.test2[,1]
df.train2 <- df.train2[,-1]
df.test2 <- df.test2[,-1]
#df.train2[1:6,1:9]
df <- df.train2
C <- 9
seed=123
users <- rownames(df) # i
movies <- colnames(df) # j
scores <- unique(unlist(df))
scores <- sort(scores[!is.na(scores)]) # k
N <- length(users) # number of users
M <- length(movies) # number of movies
K <- length(scores) # number of scores
set.seed(seed)
set.seed(seed)
mu <- runif(C)
mu
mpfr(mu, 53)
runif(mpfr(C, 53))
mpfr(C, 53)
runif(mpfr(C, 53))
sum(mpfr(mu, 53))
mpfr(mu, 53)/sum(mpfr(mu, 53))
sum(mpfr(mu, 53)/sum(mpfr(mu, 53)))
set.seed(seed)
mu <- mpfr(runif(C),53)
mu <- mu/sum(mu)
gamma <- array(mpfr(runif(C*M*K),53), c(C,M,K))
for (k in seq(K)) {
gamma[,,k] <- gamma[,,k]/rowSums(gamma[,,], dims = 2)
}
gamma[,,1]
gamma[1:6,1:9,1]
runif(C)
8/log(2,base = 10)
mu <- mpfr(runif(C),8/log(2,base = 10))
mu
mu <- mpfr(runif(C),10/log(2,base = 10))
mu
set.seed(seed)
mu <- mpfr(runif(C),8/log(2,base = 10))
mu <- mu/sum(mu)
mu
mu <- mpfr(mu/sum(mu),8/log(2,base = 10))
mu
mu <- mpfr(runif(C),53)
mu
mu <- mu/sum(mu)
mu
gamma <- array(mpfr(runif(C*M*K),53), c(C,M,K))
gamma[1:6,1:9,1]
gamma <- array(mpfr(runif(C*M*K),8/log(2,base = 10)), c(C,M,K))
gamma[1:6,1:9,1]
for (k in 1:2) {
gamma[,,k] <- gamma[,,k]/rowSums(gamma[,,], dims = 2)
}
gamma[1:6,1:9,1]
sum(is.na(gamma))
sum(gamma==0)
gamma <- array(mpfr(runif(C*M*K),2/log(2,base = 10)), c(C,M,K))
gamma[1:6,1:9,1]
gamma <- array(mpfr(runif(C*M*K),3/log(2,base = 10)), c(C,M,K))
gamma[1:6,1:9,1]
set.seed(seed)
mu <- mpfr(runif(C),3/log(2,base = 10))
mu
mu <- mu/sum(mu)
mu
set.seed(seed)
mu <- runif(C)
mu
mu <- mpfr(mu/sum(mu),3/log(2,base = 10)
mu
mu <- mpfr(mu/sum(mu),3/log(2,base = 10))
mu
set.seed(seed)
mu <- runif(C)
mu <- mpfr(mu/sum(mu),3/log(2,base = 10))
gamma <- array(mpfr(runif(C*M*K),3/log(2,base = 10)), c(C,M,K))
for (k in 1:2) {
gamma[,,k] <- gamma[,,k]/rowSums(gamma[,,], dims = 2)
}
as.numeric(mu)
set.seed(seed)
mu <- runif(C)
mu <- mu/sum(mu)
gamma <- array(runif(C*M*K), c(C,M,K)) # Class x Movie x Score
for (k in 1:2) {
gamma[,,k] <- gamma[,,k]/rowSums(gamma[,,], dims = 2)
}
sum(is.na(gamma))
sum(gamma==0)
pars <- list(mu=mu, gamma=gamma)
I <- array(0, c(N,M,K)) # User x Movie x Score
phi <- matrix(0, N, C) # User x Class
for (k in seq(K)) {
I[,,k] <- ifelse((df!=k|is.na(df)),0,1)
phi <- phi + I[,,k]%*%t(log(gamma[,,k]))
}
set.seed(seed)
mu <- runif(C)
mu <- mu/sum(mu)
gamma <- array(runif(C*M*K), c(C,M,K)) # Class x Movie x Score
for (k in seq(K)) {
gamma[,,k] <- gamma[,,k]/rowSums(gamma[,,], dims = 2)
}
pars <- list(mu=mu, gamma=gamma)
# Step 2: Expectation
# compute repsonsibilities for each user i
#Pi <- cluster.pi(df, pars)
I <- array(0, c(N,M,K)) # User x Movie x Score
phi <- matrix(0, N, C) # User x Class
for (k in seq(K)) {
I[,,k] <- ifelse((df!=k|is.na(df)),0,1)
phi <- phi + I[,,k]%*%t(log(gamma[,,k]))
}
sum(is.na(phi))
sum(phi==0)
min(phi)
mpfr(0,3/log(2,base = 10))
temp <- exp(phi)
sum(is.na(temp))
sum(temp==0)
temp <- mpfr(temp,3/log(2,base = 10))
sum(is.na(temp))
sum(temp==0)
temp <- exp(mpfr(phi, 3/log(2,base = 10)))
sum(is.na(temp))
sum(temp==0)
as.matrix(temp)
temp <- as.matrix(temp)
sum(is.na(temp))
sum(temp==0)
min(temp)
temp <- exp(mpfr(phi, 3/log(2,base = 10)))
temp <- as.matrix(temp)
temp <- asNumericMatrix(temp)
temp <- as.numeric(temp)
install.packages("ecd")
library("ecd")
temp <- exp(ecd.mpfr(phi, 3/log(2,base = 10)))
temp <- exp(Rmpfr(phi, 3/log(2,base = 10)))
temp <- exp(mpfr(phi, 3/log(2,base = 10)))
temp <- ecd.mp2f(temp)
temp <- exp(phi, digits=22)
double(pi)
double(1)
double(10)
install.packages("float")
library("float")
flrunif(C)
temp <- flrunif(C)
temp <- temp/sum(temp)
temp
sum(temp)
temp <- exp(phi)
sum(is.na(temp))
sum(temp==0)
temp <- exp(fl(phi))
sum(temp==0)
options()
options("digits")
getOption("digits")
pi
options(digits=15)
pi
getOption("digits")
options(digits=7)
pi
pi7
a <- pi
a
options(digits=15)
b <- pi
b
a
exp(-157)
exp(-200)
exp(-500)
exp(-1200)
exp(-700)
exp(-900)
exp(-800)
exp(-750)
exp(-730)
exp(-735)
exp(-736)
exp(-737)
exp(-738)
exp(-739)
exp(-740)
exp(-745)
exp(-749)
exp(-748)
exp(-746)
exp(-745)
exp(-745.5)
exp(-745.2)
exp(-745.1)
getOption("digits")
options(digits=7)
temp <- exp(mpfr(phi))
sum(is.na(temp))
sum(temp==0)
I <- array(0, c(N,M,K)) # User x Movie x Score
phi <- matrix(0, N, C) # User x Class
for (k in seq(K)) {
I[,,k] <- ifelse((df!=k|is.na(df)),0,1)
phi <- phi + I[,,k]%*%t(log(gamma[,,k]))
}
mpfr(phi)
temp <- exp(mpfr(phi,53))
sum(is.na(temp))
sum(temp==0)
phi <- as.numeric(temp)
temp[1:6,1:3]
phi[1:20]
phi[N+1:N+5]
N+1
N+5
phi[N+1:N+5]
phi[1:20]
phi[N+1]
temp[1:6,1:3]
asNumericMatrix(temp)
asNumericMatrix(temp[[1]])
as.matrix(phi, c(N,C))
as.matrix(phi, N,C))
as.matrix(phi, N,C)
phi <- as.matrix(phi, N,C)
phi[1:6,1:3]
phi <- matrix(phi, N,C)
phi[1:6,1:3]
temp[1:6,1:3]
sum(is.na(phi))
sum(phi==0)
phi <- as.numeric(temp)
sum(is.na(phi))
sum(phi==0)
phi <- exp(mpfr(phi,53))
sum(is.na(phi))
sum(phi==0)
phi[1:6,1:5]
I <- array(0, c(N,M,K)) # User x Movie x Score
phi <- matrix(0, N, C) # User x Class
for (k in seq(K)) {
I[,,k] <- ifelse((df!=k|is.na(df)),0,1)
phi <- phi + I[,,k]%*%t(log(gamma[,,k]))
}
phi <- exp(mpfr(phi,53))
phi[1:6,1:5]
sum(is.na(phi))
sum(phi==0)
a <- as.numeric(phi)
sum(is.na(a))
sum(a==0)
w <- phi*rep(mu, each=N) # User x Class
Pi <- w/rowSums(w) # User x Class
a <- rowSums(w)
a[1:6]
div.bigq(w,a)
w/a
Pi <- w/a
b <- asNumeric(phi)
sum(b==0)
b <- apply(w,2,sum)
b[1:6,1:5]
all(a==b)
a[1:6]
b[1:6]
b <- apply(w,1,sum)
b[1:6]
a <- rowSums(w)
asNumeric(w)
c <- asNumeric(w)
sum(c==0)
Pi <- w/rowSums(w)
mu.new <- colSums(Pi)/N
mu.new
mu.new <- colSums(Pi)/N
I.all <- ifelse(is.na(df),0,1) # User x Movie
I <- array(0, c(N,M,K)) # User x Movie x Score
gamma.new <-  array(NA, c(C,M,K))
for (k in seq(K)){
I[,,k] <- ifelse((df!=k|is.na(df)),0,1)
gamma.new[,,k] <- t(Pi)%*%I[,,k]/t(Pi)%*%I.all
}
for (k in seq(K)){
print(paste0("k=",k))
I[,,k] <- ifelse((df!=k|is.na(df)),0,1)
gamma.new[,,k] <- t(Pi)%*%I[,,k]/t(Pi)%*%I.all
}
df.train2[1:6,1:9]
letters
noquote(letters)
capitalize(letters)
capitalize(noquote(letters))
chartr(A,B,noquote(letters))
chartr(a,B,noquote(letters))
chartr(a,b,noquote(letters))
chartr(a,"b",noquote(letters))
chartr("a","b",noquote(letters))
chartr("a","b",letters)
exp(-2327.643)
signif(exp(-2327.643))
exp(-745.14)
signif(exp(-745.14))
signif(exp(-745.14),digits = 750)
signif(exp(-745.14),digits = 1)
1/log(10,base = 2)
27/log(10,base = 2)
showMethods(asNumeric)
i7 <- 1/mpfr(700,100)
i7
format(i7,digits=2)
exp(-745.14)
exp(mpfr(-745.14,53))
asNumeric(exp(mpfr(-745.14,53)))
format(exp(mpfr(-745.14,53)),digit=2)
library("Rmpfr")
library("reshape2")
library("Hmisc")
train2 <- read.csv("../data/eachmovie_sample/data_train.csv", header=TRUE)
test2 <- read.csv("../data/eachmovie_sample/data_test.csv", header=TRUE)
#library("reshape2")
df.train2 <- dcast(train2, User~Movie, value.var = "Score", fill = NA)
df.test2 <- dcast(test2, User~Movie, value.var = "Score", fill = NA)
rownames(df.train2) <- df.train2[,1]
rownames(df.test2) <- df.test2[,1]
df.train2 <- df.train2[,-1]
df.test2 <- df.test2[,-1]
df <- df.train2
C <- 9
seed=123
users <- rownames(df) # i
movies <- colnames(df) # j
scores <- unique(unlist(df))
scores <- sort(scores[!is.na(scores)]) # k
N <- length(users) # number of users
M <- length(movies) # number of movies
K <- length(scores) # number of scores
set.seed(seed)
mu <- runif(C)
mu <- mu/sum(mu)
gamma <- array(runif(C*M*K), c(C,M,K)) # Class x Movie x Score
for (k in seq(K)) {
gamma[,,k] <- gamma[,,k]/rowSums(gamma[,,], dims = 2)
}
pars <- list(mu=mu, gamma=gamma)
# Step 2: Expectation
I <- array(0, c(N,M,K)) # User x Movie x Score
phi <- matrix(0, N, C) # User x Class
for (k in seq(K)) {
I[,,k] <- ifelse((df!=k|is.na(df)),0,1)
phi <- phi + I[,,k]%*%t(log(gamma[,,k]))
}
phi <- exp(mpfr(phi,53))
sum(is.na(phi))
sum(phi==0)
format(phi),digit=2)
format(phi,digit=2)
phi <- format(phi,digit=5)
sum(is.na(phi))
sum(phi==0)
w <- phi*rep(mu, each=N)
phi[1,1]
phi[1,1]*mu[1]
mu[1]
phi[1,1]*mu[1]
asNumeric(phi)
sum(asNumeric(phi)==0)
phi[1,1]
phi[1,1]
.Machine
pi
format(pi, digit=2)
format(pi, digit=2)==pi
format(pi, digit=2)==round(pi,2)
round(pi,2)
format(pi, digit=3)==round(pi,2)
round(pi,2)*2
format(pi, digit=3)*2
I <- array(0, c(N,M,K)) # User x Movie x Score
phi <- matrix(0, N, C) # User x Class
for (k in seq(K)) {
I[,,k] <- ifelse((df!=k|is.na(df)),0,1)
phi <- phi + I[,,k]%*%t(log(gamma[,,k]))
}
phi <- exp(mpfr(phi,53))
phi <- as.numeric(phi)
sum(phi==0)
